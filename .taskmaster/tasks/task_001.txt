# Task ID: 1
# Title: Django Project Setup and Configuration
# Status: pending
# Dependencies: None
# Priority: high
# Description: Initialize Django project with proper structure, settings, and dependencies for offres.mr payroll system
# Details:
Create Django project structure with apps for core, employees, payroll, attendance, reports, and compliance. Configure PostgreSQL database, install required packages: Django REST framework, Celery for async tasks, django-extensions, psycopg2, openpyxl for Excel processing, reportlab for PDF generation, and Pillow for image handling. Set up proper settings modules for development/production, configure static files handling, and implement proper logging configuration. Create requirements.txt with all dependencies including specific versions for payroll calculation libraries.

# Test Strategy:
Verify project starts successfully, database connection works, all apps are properly registered, static files serve correctly, and admin interface is accessible

# Subtasks:
## 1. Create Django Project Structure with Core Apps [pending]
### Dependencies: None
### Description: Initialize Django project and create core, employees, payroll, attendance, reports, and compliance apps with proper directory structure
### Details:
Use django-admin startproject to create offres.mr project, then create six main apps (core, employees, payroll, attendance, reports, compliance) using python manage.py startapp. Set up proper directory structure with __init__.py files and basic app configurations in each app's apps.py file.

## 2. Configure PostgreSQL Database Settings [pending]
### Dependencies: 1.1
### Description: Set up PostgreSQL database connection and configure database settings for development and production environments
### Details:
Install psycopg2 package, configure DATABASES setting in settings.py with PostgreSQL connection parameters, create separate database configurations for development/production, and test database connectivity. Set up proper database naming conventions and connection pooling settings.

## 3. Install and Configure Django REST Framework [pending]
### Dependencies: 1.1
### Description: Set up Django REST framework with proper configuration for API endpoints and serialization
### Details:
Install djangorestframework, add to INSTALLED_APPS, configure REST_FRAMEWORK settings with authentication classes, permission classes, and pagination. Set up API routing structure and configure serializers for future model integration.

## 4. Set Up Celery for Async Task Processing [pending]
### Dependencies: 1.2
### Description: Configure Celery for handling asynchronous tasks like payroll processing and report generation
### Details:
Install Celery and Redis/RabbitMQ broker, create celery.py configuration file, set up task discovery, configure CELERY settings in Django settings, and create basic task structure for payroll processing and report generation tasks.

## 5. Configure Static Files and Media Handling [pending]
### Dependencies: 1.1
### Description: Set up proper static files and media file handling for development and production environments
### Details:
Configure STATIC_URL, STATIC_ROOT, MEDIA_URL, and MEDIA_ROOT settings. Set up staticfiles app configuration, create proper directory structure for static assets, and configure whitenoise or similar for production static file serving.

## 6. Implement Development and Production Settings Modules [pending]
### Dependencies: 1.2, 1.5
### Description: Create separate settings modules for development and production environments with proper configuration management
### Details:
Split settings.py into base.py, development.py, and production.py modules. Configure environment-specific settings like DEBUG, ALLOWED_HOSTS, database configurations, and security settings. Set up environment variable management for sensitive configuration.

## 7. Set Up Comprehensive Logging Configuration [pending]
### Dependencies: 1.6
### Description: Implement proper logging configuration for debugging, error tracking, and audit trails
### Details:
Configure LOGGING setting with multiple loggers, handlers, and formatters. Set up file-based logging for errors and debug information, configure log rotation, and implement audit logging for payroll operations and user actions.

## 8. Create Requirements.txt with All Dependencies [pending]
### Dependencies: 1.3, 1.4
### Description: Generate comprehensive requirements.txt file with all necessary packages and specific versions for payroll system
### Details:
Create requirements.txt including Django, djangorestframework, psycopg2, celery, django-extensions, openpyxl, reportlab, Pillow, and other necessary packages with specific version numbers. Include payroll-specific calculation libraries and ensure compatibility between all packages.

