# Task ID: 2
# Title: Core Django Models Implementation
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Implement comprehensive Django models equivalent to the 37+ Java entities with proper relationships and validation
# Details:
Create Django models based on Java entities: Employee (72 fields), Payroll, PayrollElement, Department, Position, Direction, GeneralDirection, SalaryGrade, Bank, PayrollMotif, SystemParameters, User (with 22 permission flags), TimeClockData, DailyWorkRecord, WeeklyOvertime, Leave, Child, InstallmentDeduction, Activity, Origin, EmployeeStatus, CNSSDeclaration, CNAMDeclaration. Implement proper field types (DecimalField for currency, DateField/DateTimeField for dates, BooleanField for flags), foreign key relationships, unique constraints, and model Meta classes with appropriate table names and ordering. Add audit fields (created_at, updated_at, created_by, updated_by) to all models.

# Test Strategy:
Run migrations successfully, verify all model relationships work correctly, test model validation rules, confirm audit fields populate automatically, and ensure data integrity constraints are enforced

# Subtasks:
## 1. Create Employee Model with 72 Fields [pending]
### Dependencies: None
### Description: Implement the core Employee model with all 72 fields including personal info, employment details, salary components, and audit fields
### Details:
Create Employee model with fields for personal information (name, ID numbers, contact details), employment data (hire date, contract type, status), salary components (basic salary, allowances, deductions), and audit fields (created_at, updated_at, created_by, updated_by). Use appropriate Django field types: DecimalField for currency, DateField/DateTimeField for dates, BooleanField for flags, CharField with max_length for text fields.

## 2. Implement Organizational Structure Models [pending]
### Dependencies: None
### Description: Create Department, Position, Direction, and GeneralDirection models with proper hierarchical relationships
### Details:
Implement organizational models: Department (code, name, description, parent_department), Position (title, grade, description, department), Direction (name, code, head), GeneralDirection (name, code, director). Establish proper foreign key relationships and hierarchical structures with self-referencing foreign keys where needed.

## 3. Build Payroll Core Models [pending]
### Dependencies: 2.1
### Description: Create Payroll, PayrollElement, and SalaryGrade models for payroll processing foundation
### Details:
Implement Payroll model (employee, period, status, amounts), PayrollElement model (payroll, element_type, amount, formula), and SalaryGrade model (grade, min_salary, max_salary, step_increment). Establish relationships between Employee and Payroll, and between Payroll and PayrollElements.

## 4. Create Banking and Financial Models [pending]
### Dependencies: None
### Description: Implement Bank and PayrollMotif models for payment processing and financial operations
### Details:
Create Bank model (name, code, swift_code, address, contact_info) and PayrollMotif model (code, description, type, calculation_rules). These models support payment processing and different types of payroll calculations (regular salary, bonuses, deductions, etc.).

## 5. Implement User Model with Permission Flags [pending]
### Dependencies: None
### Description: Create custom User model extending AbstractUser with 22 module-specific permission flags
### Details:
Extend Django's AbstractUser to create custom User model with 22 boolean permission flags: can_access_personnel, can_access_payroll, can_access_attendance, can_access_reports, can_modify_employees, can_process_payroll, can_view_salary_details, can_generate_reports, can_manage_users, can_configure_system, etc. Include audit fields and proper Meta configuration.

## 6. Build Time Tracking Models [pending]
### Dependencies: 2.1
### Description: Create TimeClockData, DailyWorkRecord, and WeeklyOvertime models for attendance management
### Details:
Implement TimeClockData model (employee, clock_in, clock_out, location, device_id), DailyWorkRecord model (employee, date, hours_worked, overtime_hours, status), and WeeklyOvertime model (employee, week_start, regular_hours, overtime_hours, approved_by). Establish proper relationships with Employee model.

## 7. Create Leave Management Models [pending]
### Dependencies: 2.1
### Description: Implement Leave model and related entities for managing employee leave requests and balances
### Details:
Create Leave model (employee, leave_type, start_date, end_date, days_requested, days_approved, status, reason, approved_by) and supporting models for leave types, balances, and policies. Include validation rules for leave eligibility and balance calculations.

## 8. Implement Child and Dependent Models [pending]
### Dependencies: 2.1
### Description: Create Child model and related dependent management entities for family allowance calculations
### Details:
Implement Child model (employee, name, birth_date, gender, dependency_status, allowance_eligible) and related dependent models. Include validation for age limits, dependency status, and automatic allowance eligibility calculations based on child age and status.

## 9. Build Deduction and Installment Models [pending]
### Dependencies: 2.1
### Description: Create InstallmentDeduction model and related entities for managing employee deductions and installment payments
### Details:
Implement InstallmentDeduction model (employee, deduction_type, total_amount, installment_amount, remaining_balance, start_date, end_date, status) and supporting deduction type models. Include automatic balance calculations and payment scheduling logic.

## 10. Create Activity and Status Models [pending]
### Dependencies: 2.1
### Description: Implement Activity, Origin, and EmployeeStatus models for tracking employee activities and status changes
### Details:
Create Activity model (employee, activity_type, date, description, created_by), Origin model (code, description, type), and EmployeeStatus model (status_code, description, active). These models track employee activities, data origins, and status transitions throughout employment lifecycle.

## 11. Implement Declaration Models for Compliance [pending]
### Dependencies: 2.1, 2.3
### Description: Create CNSSDeclaration and CNAMDeclaration models for regulatory compliance reporting
### Details:
Implement CNSSDeclaration model (employee, period, salary_base, contribution_amount, declaration_date, status) and CNAMDeclaration model (employee, period, salary_base, contribution_amount, declaration_date, status). Include validation rules for contribution calculations and regulatory compliance requirements.

## 12. Create Migrations and Test Model Relationships [pending]
### Dependencies: 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.10, 2.11
### Description: Generate Django migrations for all models and validate all relationships work correctly
### Details:
Generate and run Django migrations for all implemented models. Test all foreign key relationships, unique constraints, and model validations. Verify that audit fields populate automatically, cascade delete behaviors work correctly, and all model Meta configurations are properly applied. Run comprehensive relationship tests to ensure data integrity.

